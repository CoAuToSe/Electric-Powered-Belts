-- constants.lua
-- Centralized constants for Electric Powered Belts

local constants = {}

-- Energy multiplier for powered belts
constants.ENERGY_MULTIPLIER = settings.startup["powered-belts-usage-multiplier"].value

-- Supported entity types
constants.SUPPORTED_ENTITIES = {
    ["transport-belt"] = true,
    ["underground-belt"] = true,
    ["splitter"] = true
}

return constants

-- utils.lua
-- Utility functions for Electric Powered Belts

local utils = {}

--- Check if an entity is supported
---@param entity LuaEntity
---@return boolean
function utils.is_supported_entity(entity)
    return constants.SUPPORTED_ENTITIES[entity.type] ~= nil
end

--- Deep copy utility
---@param obj table
---@return table
function utils.deepcopy(obj)
    local copy = {}
    for k, v in pairs(obj) do
        if type(v) == "table" then
            copy[k] = utils.deepcopy(v)
        else
            copy[k] = v
        end
    end
    return copy
end

return utils

-- rendering.lua
-- Rendering logic for Electric Powered Belts

local rendering = {}

--- Render a connection between two entities
---@param from_entity LuaEntity
---@param to_entity LuaEntity
function rendering.render_connection(from_entity, to_entity)
    rendering.draw_line{
        color = {1, 0, 0}, -- Red line
        width = 2,
        from = from_entity.position,
        to = to_entity.position,
        surface = from_entity.surface
    }
end

return rendering

-- control.lua
-- Main control logic for Electric Powered Belts

local constants = require("scripts/constants")
local utils = require("scripts/utils")
local rendering = require("scripts/rendering")

-- Initialization
script.on_init(function()
    global.powered_belts = {}
end)

-- Event handlers
script.on_event({defines.events.on_built_entity, defines.events.on_robot_built_entity}, function(event)
    local entity = event.created_entity

    if utils.is_supported_entity(entity) then
        -- Add the entity to the global tracking table
        global.powered_belts[entity.unit_number] = entity
        
        -- Example rendering logic
        rendering.render_connection(entity, entity) -- Modify as needed
    end
end)

script.on_event(defines.events.on_tick, function()
    -- Periodic updates for powered belts
    for _, entity in pairs(global.powered_belts) do
        if entity.valid then
            -- Perform energy checks or updates here
        else
            global.powered_belts[entity.unit_number] = nil
        end
    end
end)
