-- constants.lua
-- Centralized constants for Electric Powered Belts

local constants = {}

-- Energy multiplier for powered belts
constants.ENERGY_MULTIPLIER = settings.startup["powered-belts-usage-multiplier"].value

-- Supported entity types
constants.SUPPORTED_ENTITIES = {
    ["transport-belt"] = true,
    ["underground-belt"] = true,
    ["splitter"] = true
}

-- Default power usage multiplier
constants.DEFAULT_POWER_USAGE = 160

-- Belt speeds based on tier
constants.BELT_SPEEDS = {
    ["transport-belt"] = 0.03125,
    ["fast-transport-belt"] = 0.0625,
    ["express-transport-belt"] = 0.09375
}

return constants

-- utils.lua
-- Utility functions for Electric Powered Belts

local utils = {}

--- Check if an entity is supported
---@param entity LuaEntity
---@return boolean
function utils.is_supported_entity(entity)
    return constants.SUPPORTED_ENTITIES[entity.type] ~= nil
end

--- Deep copy utility
---@param obj table
---@return table
function utils.deepcopy(obj)
    local copy = {}
    for k, v in pairs(obj) do
        if type(v) == "table" then
            copy[k] = utils.deepcopy(v)
        else
            copy[k] = v
        end
    end
    return copy
end

--- Calculate power usage for a belt entity
---@param entity LuaEntity
---@return number
function utils.calculate_power_usage(entity)
    local base_speed = constants.BELT_SPEEDS[entity.name] or 0
    return constants.DEFAULT_POWER_USAGE * base_speed * constants.ENERGY_MULTIPLIER
end

return utils

-- rendering.lua
-- Rendering logic for Electric Powered Belts

local rendering = {}

--- Render a connection between two entities
---@param from_entity LuaEntity
---@param to_entity LuaEntity
function rendering.render_connection(from_entity, to_entity)
    rendering.draw_line{
        color = {1, 0, 0}, -- Red line
        width = 2,
        from = from_entity.position,
        to = to_entity.position,
        surface = from_entity.surface
    }
end

--- Render a power overlay for an entity
---@param entity LuaEntity
function rendering.render_power_overlay(entity)
    rendering.draw_text{
        text = "Power: " .. tostring(utils.calculate_power_usage(entity)) .. "W",
        surface = entity.surface,
        target = entity,
        target_offset = {0, -1},
        color = {1, 1, 1},
        alignment = "center"
    }
end

return rendering

-- control.lua
-- Main control logic for Electric Powered Belts

local constants = require("scripts/constants")
local utils = require("scripts/utils")
local rendering = require("scripts/rendering")

-- Initialization
script.on_init(function()
    storage.powered_belts = {}
end)

-- Event handlers
script.on_event({defines.events.on_built_entity, defines.events.on_robot_built_entity}, function(event)
    local entity = event.created_entity

    if utils.is_supported_entity(entity) then
        -- Add the entity to the storage tracking table
        storage.powered_belts[entity.unit_number] = entity
        
        -- Render power overlay for the belt
        rendering.render_power_overlay(entity)
    end
end)

script.on_event(defines.events.on_tick, function()
    -- Periodic updates for powered belts
    for _, entity in pairs(storage.powered_belts) do
        if entity.valid then
            -- Update power overlay
            rendering.render_power_overlay(entity)
        else
            storage.powered_belts[entity.unit_number] = nil
        end
    end
end)
